FROM ubuntu:noble AS base

RUN ln -snf /usr/share/zoneinfo/$CONTAINER_TIMEZONE /etc/localtime \
    && echo $CONTAINER_TIMEZONE > /etc/timezone \
    && apt-get update -y \
    && apt-get upgrade -y \
    && apt-get install -y \
      apt-utils \
      cmake \
      curl \
      libcurl4-openssl-dev \
      git \
      gfortran \
      gcc \
      g++ \
      groff \
      libblas-dev \
      liblapacke-dev \
      liblapack-dev \
      libssl-dev \
      m4 \
      make \
      openssl \
      pkg-config \
      rsync \
      wget \
      zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*

# Install miniforge
ENV MINIFORGE_VERSION=24.7.1-0
RUN wget https://github.com/conda-forge/miniforge/releases/download/${MINIFORGE_VERSION}/Miniforge3-Linux-$(uname -m).sh -O /tmp/miniforge.sh \
    && bash /tmp/miniforge.sh -b -p /opt/conda \
    && rm /tmp/miniforge.sh

# Make conda available
ENV PATH=/opt/conda/bin:$PATH

# Create a Python 3.11 environment
RUN mamba install -y python=3.11 \
    && conda clean -afy

ENV mpi_version=5.0.8
RUN export mpi_version_major=`echo ${mpi_version} | cut -c1-3` && echo $mpi_version_major \
  && wget https://download.open-mpi.org/release/open-mpi/v${mpi_version_major}/openmpi-${mpi_version}.tar.gz \
  && tar xvf openmpi-${mpi_version}.tar.gz \
  && cd openmpi-${mpi_version} \
  && FFLAGS="-fallow-argument-mismatch" FCFLAGS="-fallow-argument-mismatch" ./configure --enable-shared --prefix=/usr/local \
  && make -j4 \
  && make install \
  && cd ../ \
  && rm -r openmpi-${mpi_version}/ \
  && rm openmpi-${mpi_version}.tar.gz

# Versions change and we cannot set environment variables from command output.
ARG petsc_ver
ARG trilinos_ver
ARG https_proxy
ARG http_proxy
ARG amanzi_branch=master

# Installation paths
ENV AMANZI_PREFIX=/home/modex_user/install \
  AMANZI_INSTALL_DIR=/home/modex_user/install/amanzi \
  AMANZI_TPLS_DIR=/home/modex_user/install/tpls
ENV  AMANZI_PETSC_LIBS=$AMANZI_TPLS_DIR/petsc-${petsc_ver}/lib \
  AMANZI_TRILINOS_LIBS=$AMANZI_TPLS_DIR/trilinos-${trilinos_ver}/lib \
  AMANZI_SEACAS_LIBS=$AMANZI_TPLS_DIR/SEACAS/lib

# Set the current working directory as the users home directory
# (creates the directory if it doesn't exist)
WORKDIR /home/modex_user
ADD tools /home/modex_user/tools

RUN git clone https://github.com/amanzi/amanzi.git \
  && cd amanzi/ \
  && git submodule update --init --recursive

WORKDIR /home/modex_user/amanzi
ENV LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib
RUN echo `which mpicc`
RUN ./bootstrap.sh --prefix=${AMANZI_PREFIX} \
      --parallel=4 --opt \
      --amanzi-build-dir=/home/modex_user/amanzi_builddir/amanzi \
      --tpl-build-dir=/home/modex_user/amanzi_builddir/tpls \
      --tpl-download-dir=/home/modex_user/amanzi_builddir/tpls/Downloads \
      --disable-build_user_guide \
      --enable-shared --enable-geochemistry \
      --disable-build_amanzi \
      --with-mpi=/usr/local \
      --with-python=/opt/conda/bin/python \
  && rm -r /home/modex_user/amanzi_builddir \
  && cd /home/modex_user/install \
  && find . -type f -name '*.pdf' -exec rm {} + \
  && find . -type f -name '*.png' -exec rm {} + \
  && find . -type f -name '*.html' -exec rm {} +

# set environment variables
ENV HDF5_DIR=/home/modex_user/install/tpls \
    LD_LIBRARY_PATH=${AMANZI_TPLS_DIR}/lib:${AMANZI_PETSC_LIBS}:${AMANZI_TRILINOS_LIBS}:${AMANZI_SEACAS_LIBS}:/usr/local/lib64:/usr/local/lib:/usr/lib \
    PATH=/home/amanzi_user/amanzi/install/tools/bin:${PATH}

RUN mamba install -y -c conda-forge \
        h5py \
    && conda clean -afy

RUN ./bootstrap.sh --prefix=${AMANZI_PREFIX} \
      --parallel=4 --opt \
      --with-mpi=/usr/local \
      --amanzi-build-dir=/home/modex_user/amanzi_builddir/ats \
      --tpl-config-file=${AMANZI_TPLS_DIR}/share/cmake/amanzi-tpl-config.cmake \
      --disable-build_user_guide \ 
      --enable-ats_physics --disable-amanzi_physics --enable-reg_tests \
      --disable-structured --enable-geochemistry \
  && cd /home/modex_user/amanzi_builddir \
  && ctest


FROM ubuntu:noble AS modex-ats-elm-tem

RUN ln -snf /usr/share/zoneinfo/$CONTAINER_TIMEZONE /etc/localtime \
    && echo $CONTAINER_TIMEZONE > /etc/timezone \
    && apt-get update -y \
    && apt-get upgrade -y \
    && apt-get install -y \
      apt-transport-https \
      apt-utils \
      autoconf \
      automake \
      build-essential \
      bzip2 \
      cmake \
      cpp \
      csh \
      curl \
      doxygen \
      emacs \
      expat \
      flex \
      ftp \
      g++ \
      gcc \
      gedit \
      git \
      gfortran \
      groff \
      graphviz \
      gsl-bin \
      jq \
      libblas-dev \
      libboost-all-dev \
      libbz2-dev \
      libcurl4-openssl-dev \
      libevent-dev \
      libffi-dev \
      libgmp3-dev \
      libgsl-dev \
      libhwloc-dev \
      libjsoncpp-dev \
      liblapack-dev \
      liblapacke \
      liblapacke-dev \
      liblzma-dev \
      libncurses5-dev \
      libncursesw5-dev \
      libnetcdf-dev \
      libreadline-dev \
      libsqlite3-dev \
      libssl-dev \
      libtool \
      libudunits2-0 \
      libudunits2-dev \
      libxml-libxml-perl \
      libxml2 \
      libxml2-dev \
      libxml2-utils \
      libzstd-dev \
      llvm \
      locales \
      m4 \
      make \
      nco \
      ncview \
      openssl \
      pkg-config \
      python-is-python3 \
      python3 \
      python3-dev \
      python3-openssl \
      python3-pip \
      rsync \
      subversion \
      tk-dev \
      tzdata \
      udunits-bin \
      unzip \
      vim \
      wget \
      xz-utils \
      zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*

# Install miniforge
ENV MINIFORGE_VERSION=24.7.1-0
RUN wget https://github.com/conda-forge/miniforge/releases/download/${MINIFORGE_VERSION}/Miniforge3-Linux-$(uname -m).sh -O /tmp/miniforge.sh \
    && bash /tmp/miniforge.sh -b -p /opt/conda \
    && rm /tmp/miniforge.sh

# Make conda available
ENV PATH=/opt/conda/bin:$PATH

# Create a Python 3.11 environment
RUN mamba install -y python=3.11 \
  && mamba install -y -c conda-forge \
	  numpy \
	  Cython \
	  netcdf4 \
	  scipy \
	  mpi4py \
	  cftime \
	  configparser \
	  h5py \
  && conda clean -afy

ENV mpi_version=5.0.8
RUN export mpi_version_major=`echo ${mpi_version} | cut -c1-3` && echo $mpi_version_major \
  && wget https://download.open-mpi.org/release/open-mpi/v${mpi_version_major}/openmpi-${mpi_version}.tar.gz \
  && tar xvf openmpi-${mpi_version}.tar.gz \
  && cd openmpi-${mpi_version} \
  && FFLAGS="-fallow-argument-mismatch" FCFLAGS="-fallow-argument-mismatch" ./configure --enable-shared --prefix=/usr/local \
  && make -j4 \
  && make install \
  && cd ../ \
  && rm -r openmpi-${mpi_version}/ \
  && rm openmpi-${mpi_version}.tar.gz

# Add an unprivileged user and group: modex_user, modex_user
RUN groupadd -r modex_user \
  && useradd -r -K UMASK=0022 -K HOME_MODE=0755 -m -g modex_user modex_user
USER modex_user

# Installation paths
ENV AMANZI_PREFIX=/home/modex_user/install \
  AMANZI_INSTALL_DIR=/home/modex_user/install/amanzi \
  AMANZI_TPLS_DIR=/home/modex_user/install/tpls

ENV  AMANZI_PETSC_LIBS=$AMANZI_TPLS_DIR/petsc-${petsc_ver}/lib \
  AMANZI_TRILINOS_LIBS=$AMANZI_TPLS_DIR/trilinos-${trilinos_ver}/lib \
  AMANZI_SEACAS_LIBS=$AMANZI_TPLS_DIR/SEACAS/lib
  
ENV HDF5_DIR=/home/modex_user/install/tpls \
    LD_LIBRARY_PATH=${AMANZI_TPLS_DIR}/lib:${AMANZI_PETSC_LIBS}:${AMANZI_TRILINOS_LIBS}:${AMANZI_SEACAS_LIBS}:/usr/local/lib64:/usr/local/lib:/usr/lib 

################ TEM ####################

ARG TEM_VERSION="unset"      # default if not passed as --build-arg TEM_VERSION=xxx
USER modex_user
WORKDIR /home/modex_user/TEM

# Copy the source into the image
COPY --chown=modex_user:modex_user TEM/src/ /home/modex_user/TEM/src/
COPY --chown=modex_user:modex_user TEM/Makefile /home/modex_user/TEM/Makefile
COPY --chown=modex_user:modex_user TEM/include/ /home/modex_user/TEM/include/

# Set some environment variables used during the compile
ENV SITE_SPECIFIC_INCLUDES="-I/usr/include/jsoncpp"
ENV SITE_SPECIFIC_LIBS="-I/usr/lib"

# Compile the C++ part of dvmdostem
# passing in the git version. Typically this is looked up automatically
# during the make process, but since we are copying the source into the
# image, the .git directory is not there, so it cannot be determined.
# We can pass it in as a build argument when building the image.
# If not passed in, it defaults to "unset"
RUN make clean && GIT_SHA=$TEM_VERSION make

# Copy a bunch of other stuff needed to run TEM into the image
COPY --chown=modex_user:modex_user TEM/config/ /home/modex_user/TEM/config/
COPY --chown=modex_user:modex_user TEM/parameters/ /home/modex_user/TEM/parameters/
COPY --chown=modex_user:modex_user TEM/demo-data/ /home/modex_user/TEM/demo-data/
COPY --chown=modex_user:modex_user TEM/pyddt/ /home/modex_user/TEM/pyddt
COPY --chown=modex_user:modex_user TEM/bootstrap_install.sh /home/modex_user/TEM/bootstrap_install.sh

# Run the installer script to put dvmdostem and pyddt in a location
# that is not wiped out if the user mounts a volume at /home/modex_user/TEM
# when launching the container.
# since dvmdostem doesn't follow a standard autotools or cmake install, I put
# it in its own directory to avoid messing with the amanzi install
RUN ./bootstrap_install.sh --prefix="/home/modex_user/install_dvmdostem"
RUN echo "Trying to run installed dvmdostem binary..." \
  && /home/modex_user/install_dvmdostem/bin/dvmdostem --help

RUN pip install -e /home/modex_user/install_dvmdostem/pyddt
RUN echo "Trying to run pyddt..." \
  && python -c "import pyddt; print(pyddt)" 

# Cleanup...all the relevant bits should have been copied during the install
# The full source can be made available by mounting a volume at container 
# runtime.
RUN rm -rf /home/modex_user/TEM

# Make dvmdostem and pyddt available in the PATH
ENV PATH="/home/modex_user/install_dvmdostem/bin:$PATH"
ENV PATH="/home/modex_user/.local/bin:$PATH"

# End of TEM section
#########################################

WORKDIR /home/modex_user/
COPY --from=base /home/modex_user/install /home/modex_user/install
COPY .cime /home/modex_user/.cime


