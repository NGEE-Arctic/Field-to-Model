FROM ubuntu:noble AS ats
ARG TARGETARCH

RUN ln -snf /usr/share/zoneinfo/$CONTAINER_TIMEZONE /etc/localtime \
    && echo $CONTAINER_TIMEZONE > /etc/timezone \
    && apt-get update -y \
    && apt-get upgrade -y \
    && apt-get install -y \
      apt-utils \
      cmake \
      curl \
      libcurl4-openssl-dev \
      git \
      gfortran \
      gcc \
      g++ \
      groff \
      libblas-dev \
      liblapacke-dev \
      liblapack-dev \
      libssl-dev \
      m4 \
      make \
      openssl \
      pkg-config \
      rsync \
      wget \
      zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*

# Install miniforge
ENV MINIFORGE_VERSION=24.7.1-0
RUN wget https://github.com/conda-forge/miniforge/releases/download/${MINIFORGE_VERSION}/Miniforge3-Linux-$(uname -m).sh -O /tmp/miniforge.sh \
    && bash /tmp/miniforge.sh -b -p /opt/conda \
    && rm /tmp/miniforge.sh

# Make conda available
ENV PATH=/opt/conda/bin:$PATH

# Create a Python 3.11 environment
RUN mamba install -y python=3.11 \
    && conda clean -afy

ENV mpi_version=5.0.8
RUN export mpi_version_major=`echo ${mpi_version} | cut -c1-3` && echo $mpi_version_major \
  && wget https://download.open-mpi.org/release/open-mpi/v${mpi_version_major}/openmpi-${mpi_version}.tar.gz \
  && tar xvf openmpi-${mpi_version}.tar.gz \
  && cd openmpi-${mpi_version} \
  && FFLAGS="-fallow-argument-mismatch" FCFLAGS="-fallow-argument-mismatch" ./configure --enable-shared --prefix=/usr/local \
  && make -j4 \
  && make install \
  && cd ../ \
  && rm -r openmpi-${mpi_version}/ \
  && rm openmpi-${mpi_version}.tar.gz

# Versions change and we cannot set environment variables from command output.
ARG petsc_ver=3.20
ARG trilinos_ver=15-1-0
ARG amanzi_branch=master

# Installation paths
ENV AMANZI_PREFIX=/home/modex_user/install_ats \
  AMANZI_INSTALL_DIR=/home/modex_user/install_ats/amanzi \
  AMANZI_TPLS_DIR=/home/modex_user/install_ats/tpls
ENV  AMANZI_PETSC_LIBS=$AMANZI_TPLS_DIR/petsc-${petsc_ver}/lib \
  AMANZI_TRILINOS_LIBS=$AMANZI_TPLS_DIR/trilinos-${trilinos_ver}/lib \
  AMANZI_SEACAS_LIBS=$AMANZI_TPLS_DIR/SEACAS/lib

# Set the current working directory as the users home directory
# (creates the directory if it doesn't exist)
WORKDIR /home/modex_user
ADD tools /home/modex_user/tools

RUN git clone -b amanzi-1.6 https://github.com/amanzi/amanzi.git \
  && cd amanzi/ \
  && git submodule update --init --recursive

WORKDIR /home/modex_user/amanzi
ENV LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib
RUN ./bootstrap.sh --prefix=${AMANZI_PREFIX} \
      --parallel=4 --opt \
      --amanzi-build-dir=/home/modex_user/amanzi_builddir/amanzi \
      --tpl-build-dir=/home/modex_user/amanzi_builddir/tpls \
      --tpl-download-dir=/home/modex_user/amanzi_builddir/tpls/Downloads \
      --disable-build_user_guide \
      --enable-shared --enable-geochemistry \
      --disable-build_amanzi \
      --with-mpi=/usr/local \
      --with-python=/opt/conda/bin/python \
  && rm -r /home/modex_user/amanzi_builddir \
  && cd /home/modex_user/install_ats \
  && find . -type f -name '*.pdf' -exec rm {} + \
  && find . -type f -name '*.png' -exec rm {} + \
  && find . -type f -name '*.html' -exec rm {} +

# set environment variables
ENV HDF5_DIR=/home/modex_user/install_ats/tpls \
    LD_LIBRARY_PATH=${AMANZI_TPLS_DIR}/lib:${AMANZI_PETSC_LIBS}:${AMANZI_TRILINOS_LIBS}:${AMANZI_SEACAS_LIBS}:/usr/local/lib64:/usr/local/lib:/usr/lib \
    PATH=/home/amanzi_user/amanzi/install_ats/tools/bin:${PATH}

RUN mamba install -y -c conda-forge \
        h5py \
    && conda clean -afy

RUN ./bootstrap.sh --prefix=${AMANZI_PREFIX} \
      --parallel=4 --opt \
      --with-mpi=/usr/local \
      --amanzi-build-dir=/home/modex_user/amanzi_builddir/ats \
      --tpl-config-file=${AMANZI_TPLS_DIR}/share/cmake/amanzi-tpl-config.cmake \
      --disable-build_user_guide \ 
      --enable-ats_physics --disable-amanzi_physics --enable-reg_tests \
      --disable-structured --enable-geochemistry \
  && cd /home/modex_user/amanzi_builddir \
  && ctest

FROM ubuntu:noble AS modex-ats-elm-tem

RUN ln -snf /usr/share/zoneinfo/$CONTAINER_TIMEZONE /etc/localtime \
    && echo $CONTAINER_TIMEZONE > /etc/timezone \
    && apt-get update -y \
    && apt-get upgrade -y \
    && apt-get install -y \
      apt-transport-https \
      apt-utils \
      autoconf \
      automake \
      build-essential \
      bzip2 \
      cmake \
      cpp \
      csh \
      curl \
      expat \
      flex \
      ftp \
      g++ \
      gcc \
      git \
      gfortran \
      groff \
      gsl-bin \
      jq \
      libblas-dev \
      libboost-all-dev \
      libbz2-dev \
      libcurl4-openssl-dev \
      libevent-dev \
      libffi-dev \
      libgmp3-dev \
      libgsl-dev \
      libhwloc-dev \
      libjsoncpp-dev \
      liblapack-dev \
      liblapacke \
      liblapacke-dev \
      liblzma-dev \
      libncurses5-dev \
      libncursesw5-dev \
      libnetcdf-dev \
      libreadline-dev \
      libsqlite3-dev \
      libssl-dev \
      libtool \
      libudunits2-0 \
      libudunits2-dev \
      libxml-libxml-perl \
      libxml2 \
      libxml2-dev \
      libxml2-utils \
      libzstd-dev \
      locales \
      m4 \
      make \
      nco \
      openssl \
      pkg-config \
      rsync \
      subversion \
      tk-dev \
      tzdata \
      udunits-bin \
      unzip \
      vim \
      wget \
      xz-utils \
      zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*

# Install miniforge
ENV MINIFORGE_VERSION=24.7.1-0
RUN wget https://github.com/conda-forge/miniforge/releases/download/${MINIFORGE_VERSION}/Miniforge3-Linux-$(uname -m).sh -O /tmp/miniforge.sh \
    && bash /tmp/miniforge.sh -b -p /opt/conda \
    && rm /tmp/miniforge.sh

# Make conda available
ENV PATH=/opt/conda/bin:$PATH

# Create a Python 3.11 environment
RUN mamba install -y python=3.11 \
  && mamba install -y -c conda-forge \
	  numpy \
	  Cython \
	  netcdf4 \
	  scipy \
	  mpi4py \
	  cftime \
	  configparser \
	  h5py \
  && conda clean -afy

ENV mpi_version=5.0.8
RUN export mpi_version_major=`echo ${mpi_version} | cut -c1-3` && echo $mpi_version_major \
  && wget https://download.open-mpi.org/release/open-mpi/v${mpi_version_major}/openmpi-${mpi_version}.tar.gz \
  && tar xvf openmpi-${mpi_version}.tar.gz \
  && cd openmpi-${mpi_version} \
  && FFLAGS="-fallow-argument-mismatch" FCFLAGS="-fallow-argument-mismatch" ./configure --enable-shared --prefix=/usr/local \
  && make -j4 \
  && make install \
  && cd ../ \
  && rm -r openmpi-${mpi_version}/ \
  && rm openmpi-${mpi_version}.tar.gz

# Add an unprivileged user and group: modex_user, modex_user
ARG petsc_ver=3.20
ARG trilinos_ver=15-1-0
RUN mkdir -p /mnt/inputdata /mnt/output
RUN groupadd -r modex_user -g 1001 \
  && useradd -u 1001 -r -K UMASK=0022 -K HOME_MODE=0755 -m -g modex_user modex_user \
  && chown -R 1001:1001 /home/modex_user /mnt
USER modex_user

# Installation paths
ENV AMANZI_PREFIX=/home/modex_user/install_ats \
  AMANZI_INSTALL_DIR=/home/modex_user/install_ats/amanzi \
  AMANZI_TPLS_DIR=/home/modex_user/install_ats/tpls

ENV  AMANZI_PETSC_LIBS=$AMANZI_TPLS_DIR/petsc-${petsc_ver}/lib \
  AMANZI_TRILINOS_LIBS=$AMANZI_TPLS_DIR/trilinos-${trilinos_ver}/lib \
  AMANZI_SEACAS_LIBS=$AMANZI_TPLS_DIR/SEACAS/lib
  
ENV HDF5_DIR=/home/modex_user/install_ats/tpls \
    LD_LIBRARY_PATH=${AMANZI_TPLS_DIR}/lib:${AMANZI_PETSC_LIBS}:${AMANZI_TRILINOS_LIBS}:${AMANZI_SEACAS_LIBS}:/usr/local/lib64:/usr/local/lib:/usr/lib 

################ TEM ####################

# Override by passing --build-arg TEM_VERSION=<git_sha> when building the image
ARG TEM_VERSION="77038e0c"
USER modex_user
WORKDIR /home/modex_user

# Set some environment variables used during the compile
ENV SITE_SPECIFIC_INCLUDES="-I/usr/include/jsoncpp"
ENV SITE_SPECIFIC_LIBS="-L/usr/lib"

# Clone the dvmdostem repository and compile it. By cloning here, we have
# access to the .git directory, which allows us to determine the git version.
# Here we use git describe to get a human readable version string. Alternatively,
# we could just use the commit hash via the TEM_VERSION build argument.
RUN git clone https://github.com/uaf-arctic-eco-modeling/dvm-dos-tem \
  && cd dvm-dos-tem/ && git checkout $TEM_VERSION \
  && make clean && export GIT_SHA=$(git describe) && make -j4 \
# Run the installer script to put dvmdostem and pyddt in a location
# that is not wiped out if the user mounts a volume at /home/modex_user/TEM
# when launching the container.
# since dvmdostem doesn't follow a standard autotools or cmake install, I put
# it in its own directory to avoid messing with the amanzi install
  && ./bootstrap_install.sh --prefix="/home/modex_user/install_dvmdostem" \
  && echo "Trying to run installed dvmdostem binary..." \
  && /home/modex_user/install_dvmdostem/bin/dvmdostem --help \
  && rm -rf /home/modex_user/dvm-dos-tem

RUN pip install -e /home/modex_user/install_dvmdostem/pyddt \
  && echo "Trying to run pyddt..." \
  && python -c "import pyddt; print(pyddt)" 

# Make dvmdostem and pyddt available in the PATH
ENV PATH="/home/modex_user/.local/bin:/home/modex_user/install_dvmdostem/bin:$PATH"

# End of TEM section
#########################################

WORKDIR /home/modex_user/
COPY --from=ats --chown=modex_user:modex_user /home/modex_user/install_ats /home/modex_user/install_ats
COPY --chown=modex_user:modex_user .cime /home/modex_user/.cime
ENV PATH="/home/modex_user/install_ats/bin:$PATH"

# Need to fix a lot of permissions:
RUN mkdir -p ~/tools ~/model_examples ~/E3SM \
  && chown -R 1001:1001 /home/modex_user \
  && git config --global user.name "ModEx User" \
  && git config --global user.email "ngeearctic@dev.null"
