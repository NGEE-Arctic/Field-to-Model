FROM ubuntu:noble

RUN ln -snf /usr/share/zoneinfo/$CONTAINER_TIMEZONE /etc/localtime \
    && echo $CONTAINER_TIMEZONE > /etc/timezone \
    && apt-get update -y \
    && apt-get upgrade -y \
    && apt-get install -y \
      apt-transport-https \
      apt-utils \
      autoconf \
      automake \
      build-essential \
      bzip2 \
      cmake \
      cpp \
      csh \
      curl \
      doxygen \
      emacs \
      expat \
      flex \
      ftp \
      g++ \
      gcc \
      gedit \
      git \
      gfortran \
      groff \
      graphviz \
      gsl-bin \
      jq \
      libblas-dev \
      libboost-all-dev \
      libbz2-dev \
      libcurl4-openssl-dev \
      libevent-dev \
      libffi-dev \
      libgmp3-dev \
      libgsl-dev \
      libhwloc-dev \
      libjsoncpp-dev \
      liblapack-dev \
      liblapacke \
      liblapacke-dev \
      liblzma-dev \
      libncurses5-dev \
      libncursesw5-dev \
      libnetcdf-dev \
      libreadline-dev \
      libsqlite3-dev \
      libssl-dev \
      libtool \
      libudunits2-0 \
      libudunits2-dev \
      libxml-libxml-perl \
      libxml2 \
      libxml2-dev \
      libxml2-utils \
      libzstd-dev \
      llvm \
      locales \
      m4 \
      make \
      nco \
      ncview \
      openssl \
      pkg-config \
      python-is-python3 \
      python3 \
      python3-dev \
      python3-openssl \
      python3-pip \
      rsync \
      subversion \
      tk-dev \
      tzdata \
      udunits-bin \
      unzip \
      vim \
      wget \
      xz-utils \
      zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*

# Install miniforge
ENV MINIFORGE_VERSION=24.7.1-0
RUN wget https://github.com/conda-forge/miniforge/releases/download/${MINIFORGE_VERSION}/Miniforge3-Linux-$(uname -m).sh -O /tmp/miniforge.sh \
    && bash /tmp/miniforge.sh -b -p /opt/conda \
    && rm /tmp/miniforge.sh

# Make conda available
ENV PATH=/opt/conda/bin:$PATH

# Create a Python 3.11 environment
RUN mamba install -y python=3.11 \
    && mamba install -y -c conda-forge \
	numpy \
	Cython \
	netcdf4 \
	scipy \
	mpi4py \
	cftime \
	configparser \
	h5py \
    && conda clean -afy

ENV mpi_version=5.0.8
RUN export mpi_version_major=`echo ${mpi_version} | cut -c1-3` && echo $mpi_version_major \
  && wget https://download.open-mpi.org/release/open-mpi/v${mpi_version_major}/openmpi-${mpi_version}.tar.gz \
  && tar xvf openmpi-${mpi_version}.tar.gz \
  && cd openmpi-${mpi_version} \
  && FFLAGS="-fallow-argument-mismatch" FCFLAGS="-fallow-argument-mismatch" ./configure --enable-shared --prefix=/usr/local \
  && make -j16 \
  && make install \
  && cd ../ \
  && rm -r openmpi-${mpi_version}/ \
  && rm openmpi-${mpi_version}.tar.gz

# Versions change and we cannot set environment variables from command output.
ARG petsc_ver
ARG trilinos_ver
ARG https_proxy
ARG http_proxy
ARG amanzi_branch=master

# Installation paths
ENV AMANZI_PREFIX=/home/modex_user/install \
  AMANZI_INSTALL_DIR=/home/modex_user/install/amanzi \
  AMANZI_TPLS_DIR=/home/modex_user/install/tpls

# TPL versions needed for LD_LIBRARY_PATH
ENV AMANZI_PETSC_LIBS=$AMANZI_TPLS_DIR/petsc-${petsc_ver}/lib \
  AMANZI_TRILINOS_LIBS=$AMANZI_TPLS_DIR/trilinos-${trilinos_ver}/lib \
  AMANZI_SEACAS_LIBS=$AMANZI_TPLS_DIR/SEACAS/lib

# Add an unprivileged user and group: modex_user, modex_user
RUN groupadd -r modex_user \
  && useradd -r -K UMASK=0022 -K HOME_MODE=0755 -m -g modex_user modex_user
USER modex_user

# Set the current working directory as the users home directory
# (creates the directory if it doesn't exist)
WORKDIR /home/modex_user
ADD tools /home/modex_user/tools


################ TEM ####################
WORKDIR /home/modex_user/TEM

COPY TEM/src/ /home/modex_user/TEM/src/
COPY TEM/Makefile /home/modex_user/TEM/Makefile
COPY TEM/include/ /home/modex_user/TEM/include/

WORKDIR /home/modex_user/TEM

USER root
RUN ln -snf /usr/share/zoneinfo/$CONTAINER_TIMEZONE /etc/localtime \
    && echo $CONTAINER_TIMEZONE > /etc/timezone \
    && apt-get update -y \
    && apt-get upgrade -y \
    && apt-get install -y \
      libjsoncpp-dev \
    && rm -rf /var/lib/apt/lists/*

USER modex_user

ENV SITE_SPECIFIC_INCLUDES="-I/usr/include/jsoncpp"
ENV SITE_SPECIFIC_LIBS="-I/usr/lib"

RUN make clean && make

WORKDIR /home/modex_user

# TODO:
#  - Figure out how to set the GIT_VERSION variable so that it can get used
#    in the Makefile
#
#  - Figure out how we should be handling the pyddt package (not even merged
#    to dvmdostem upstream yet, but plan to do this ASAP)
#
#  - Figure out how handle the config, parameters, demo-data, files...
#
#  - Think about something like this: 
#         export PATH=/home/modex_user/TEM:$PATH
#    so that the dvmdostem binary is in the path when we launch the container

# Tried this, it returns nothing...seems like git is installed in the image
# but once in the container, the .git directory is not there, so the 
# /home/modex_user/TEM is not recognized as a git repo.
#RUN echo $(git rev-parse --short HEAD) > /home/modex_user/TEM/GIT_VERSION.txt

###### TEM DEVELOPER NOTES...
# Build:
#     $ docker build -t f2m -f Docker/Dockerfile-models .
# At this point if I launch a container:
#     $ docker run -it f2m
# it drops me into a bash shell in the container, and it appears that the
# compiled TEM binary is at /home/modex_user/TEM/dvmdostem and I am able to 
# run with the --help flag!!
#     $ docker run -it f2m
#     modex_user@0fb8e6933dc8:~$ ./TEM/dvmdostem -h
#       -c [ --cal-mode ]      .... etc



RUN git clone https://github.com/amanzi/amanzi.git

WORKDIR /home/modex_user/amanzi
ENV LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib
RUN echo `which mpicc`
RUN ./bootstrap.sh --prefix=${AMANZI_PREFIX} \
      --parallel=4 --opt \
      --amanzi-build-dir=/home/modex_user/amanzi_builddir/amanzi \
      --tpl-build-dir=/home/modex_user/amanzi_builddir/tpls \
      --tpl-download-dir=/home/modex_user/amanzi_builddir/tpls/Downloads \
      --disable-build_user_guide \
      --enable-shared --enable-geochemistry \
      --disable-build_amanzi \
      --with-mpi=/usr/local \
      --with-python=/opt/conda/bin/python \
  && rm -r /home/modex_user/amanzi_builddir \
  && cd /home/modex_user/install \
  && find . -type f -name '*.pdf' -exec rm {} + \
  && find . -type f -name '*.png' -exec rm {} + \
  && find . -type f -name '*.html' -exec rm {} +

# set environment variables
ENV HDF5_DIR=/home/modex_user/install/tpls \
    LD_LIBRARY_PATH=${AMANZI_TPLS_DIR}/lib:${AMANZI_PETSC_LIBS}:${AMANZI_TRILINOS_LIBS}:${AMANZI_SEACAS_LIBS}:/usr/local/lib64:/usr/local/lib:/usr/lib \
    PATH=/home/amanzi_user/amanzi/install/tools/bin:${PATH}

RUN mamba install -y -c conda-forge \
        numpy \
        Cython \
        netcdf4 \
        scipy \
        mpi4py \
        cftime \
        configparser \
        h5py \
    && conda clean -afy

RUN ./bootstrap.sh --prefix=${AMANZI_PREFIX} \
      --parallel=4 --opt \
      --with-mpi=/usr/local \
      --amanzi-build-dir=/home/modex_user/amanzi_builddir/amanzi \
      --tpl-config-file=${AMANZI_TPLS_DIR}/share/cmake/amanzi-tpl-config.cmake \
      --disable-build_user_guide \ 
      --enable-ats_physics --disable-amanzi_physics --enable-reg_tests \
  && cd /home/modex_user/amanzi_builddir
